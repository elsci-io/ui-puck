{"version":3,"file":"index.bundle.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;ACViD;AAC1C;;AAEQ;AACf;AACA;;AAEA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qCAAqC;AACrE,+DAA+D,iBAAiB;AAChF;AACA;AACA,mDAAmD,eAAe,IAAI,kBAAkB;AACxF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,+DAA+D;AAC/D,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAc;AACjC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/Fe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACZe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;UCVA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACL6B;AACQ;;AAEvB","sources":["webpack://elsciPuck/webpack/universalModuleDefinition","webpack://elsciPuck/./src/js/Puck.js","webpack://elsciPuck/./src/js/PuckCell.js","webpack://elsciPuck/./src/js/PuckCellCoords.js","webpack://elsciPuck/webpack/bootstrap","webpack://elsciPuck/webpack/runtime/define property getters","webpack://elsciPuck/webpack/runtime/hasOwnProperty shorthand","webpack://elsciPuck/webpack/runtime/make namespace object","webpack://elsciPuck/./src/js/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"elsciPuck\"] = factory();\n\telse\n\t\troot[\"elsciPuck\"] = factory();\n})(self, () => {\nreturn ","import PuckCellCoords from \"./PuckCellCoords.js\";\nexport const CLASS_DISABLED = 'puck__cell--disabled';\n\nexport default class Puck {\n    #puckElement;\n    #cellElements = [];\n\n    /** @type {[PuckCell]} */\n    #puckCells = [];\n    #rowLengths;\n    #selectedCellIndexes;\n    #onCellClickCb = [];\n    #onCellHoverCb = [];\n\n    constructor(puckElement,rowLengths, selectedCellIndexes){\n        this.#puckElement = puckElement;\n        this.#rowLengths = rowLengths;\n        this.#selectedCellIndexes = selectedCellIndexes;\n    }\n    addCell(cellIdx, puckCell){\n        this.#puckCells[cellIdx] = puckCell;\n        const cellElement = this.#cellElements[cellIdx];\n        if(!puckCell.disabled)\n            cellElement.classList.remove(CLASS_DISABLED)\n        cellElement.classList.add(puckCell.cssClass);\n        cellElement.disabled = puckCell.disabled;\n    }\n    draw() {\n        let currentCellNumber = 1;\n        this.#drawPuckCircle();\n        const center = this.#getPuckCenter();\n        for (let rowNumber = 0; rowNumber < this.#rowLengths.length; rowNumber++) {\n            for (let cellNumber = this.#rowLengths[rowNumber]; cellNumber >= 1; cellNumber--) {\n                // by default if it's empty, then it's disabled, then if someone fills the cell, it becomes enabled\n                this.#puckElement.insertAdjacentHTML('beforeend',\n                    `<button class = \"puck__cell ${CLASS_DISABLED}\">${currentCellNumber}</button>`);\n                const lastElement = this.#puckElement.lastElementChild;\n                lastElement.disabled = true;\n\n                this.#cellElements.push(lastElement);\n                if(this.#selectedCellIndexes.includes(currentCellNumber)){\n                    lastElement.classList.toggle('puck__cell--selected');\n                }\n                lastElement.addEventListener(\"mouseover\", (event) => {\n                    this.#callCallbacks(this.#onCellHoverCb, event);\n                });\n                lastElement.addEventListener(\"click\", (event) => {\n                    event.target.classList.toggle('puck__cell--selected');\n                    this.#callCallbacks(this.#onCellClickCb, event);\n                });\n                const coords = this.#getCellCoords(rowNumber, this.#rowLengths[rowNumber], cellNumber, center);\n                lastElement.style.left = coords.x - 15 + 'px'; // or can be bottom\n                lastElement.style.top = coords.y - 15 + 'px'; // or can be right\n                currentCellNumber++;\n            }\n        }\n    }\n    onCellHover(cb) {\n        this.#onCellHoverCb.push(cb);\n    }\n    onCellClick(cb) {\n        this.#onCellClickCb.push(cb);\n    }\n\n    #callCallbacks(callbacks, event) {\n        const cellIdx = parseInt(event.target.textContent) - 1;\n        for (const cb of callbacks) {\n            const puckCell = this.#puckCells[cellIdx];\n            cb(cellIdx, puckCell);\n        }\n    }\n    #degreesToRadians(degree) {\n        return degree * Math.PI / 180;\n    }\n    #calcCellAngleStep(numberOfCellsInRow) {\n        return (360 / numberOfCellsInRow)\n    }\n    #getCellCoords(rowNumber, numberOfCells, cellNumber, center) {\n        const cellAngle = this.#calcCellAngleStep(numberOfCells) * cellNumber;\n        const cellRadius = 15;\n        const rowRadius = cellRadius * 2 + 3 + (cellRadius * rowNumber * 2.2);\n        const xCoords = center.x + Math.cos(this.#degreesToRadians(cellAngle - 90)) * rowRadius;\n        const yCoords = center.y + Math.sin(this.#degreesToRadians(cellAngle - 90)) * rowRadius;\n        return new PuckCellCoords(xCoords, yCoords, cellRadius)\n    }\n    #getPuckCenter(){\n        const rect = this.#puckElement.getBoundingClientRect();\n        return {x: rect.width / 2, y: rect.height / 2}\n    }\n    #drawPuckCircle(){\n        const diameter = this.#rowLengths.length* 60+30+(6*this.#rowLengths.length)+5;\n        const size = diameter + \"px\"\n        this.#puckElement.style.width = size;\n        this.#puckElement.style.height = size;\n    }\n}","export default class PuckCell {\n    disabled = false;\n    cssClass;\n    title;\n    additionalInfo;\n\n    constructor(disabled, cssClass, title, additionalInfo){\n        this.disabled = disabled;\n        this.cssClass = cssClass;\n        this.title = title;\n        this.additionalInfo = additionalInfo;     \n    }\n}","export default class PuckCellCoords {\n    x;\n    y;\n    radius;\n\n    constructor(x, y, radius) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport Puck from \"./Puck.js\";\nimport PuckCell from \"./PuckCell.js\";\n\nexport {Puck};\nexport {PuckCell}"],"names":[],"sourceRoot":""}